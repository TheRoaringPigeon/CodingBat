/*
* Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target, with this additional constraint: 
* if there are numbers in the array that are adjacent and the identical value, they must either all be chosen, or none of them chosen. 
* For example, with the array {1, 2, 2, 2, 5, 2}, either all three 2's in the middle must be chosen or not, all as a group. 
* (one loop can be used to find the extent of the identical values).
*/



public boolean groupSumClump(int start, int[] nums, int target) {
  //Check if we're done
  if (start >= nums.length){
    return target == 0;
  }
  //This section will run if we are not on the last spot of the arr
  if (start < nums.length - 1){
    int sum = 0, streakCount = 0;
    //Check if we can enter a winning streak
    if (nums[start] == nums[start + 1]){
      sum = nums[start] * 2;
      streakCount = 2;
      while(start + streakCount < nums.length){
        if (nums[start] != nums[start + streakCount]){
          break;
        }
        sum += nums[start];
        streakCount += 1;
      }
      return groupSumClump(start + streakCount, nums, target - sum) || 
        groupSumClump(start + streakCount, nums, target);
    }
    //We weren't on a streak. Continue like normal
    return groupSumClump(start+1, nums, target - nums[start]) || 
      groupSumClump(start+1, nums, target);
  }
  //This section will run if we are on the last spot of the arr
  return groupSumClump(start+1, nums, target - nums[start]) || 
    groupSumClump(start+1, nums, target);
}
